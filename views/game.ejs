<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crossword Puzzle</title>
    <link rel="stylesheet" href="/styles.css">
    <link rel="stylesheet" href="/message-styles.css">
    <% if (typeof user !== 'undefined' && user) { %>
    <meta name="user-id" content="<%= user.id %>">
    <% } %>
    <style>
        .crossword-container {
            margin: 20px auto;
            max-width: 600px;
        }
        
        .crossword-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 1px;
            width: 100%;
            max-width: 400px;
            margin: 0 auto;
        }
        
        .crossword-cell {
            position: relative;
            border: 1px solid #333;
            aspect-ratio: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1.5rem;
            text-transform: uppercase;
            background-color: white;
        }
        
        .crossword-cell.blocked {
            background-color: #333;
        }
        
        .cell-number {
            position: absolute;
            top: 2px;
            left: 2px;
            font-size: 0.6rem;
        }
        
        .clue-container {
            margin-top: 20px;
        }
        
        .clue-list {
            margin-bottom: 20px;
        }
        
        .clue-list h3 {
            margin-bottom: 10px;
        }
        
        #message {
            margin-top: 20px;
            padding: 10px;
            display: none;
        }
        
        #message.success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        #message.error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .controls {
            margin-top: 20px;
            display: flex;
            justify-content: center;
            gap: 10px;
        }
        
        .puzzle-metadata {
            background-color: #f8f9fa;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 15px;
            display: flex;
            justify-content: center;
            gap: 20px;
        }
        
        .puzzle-metadata p {
            margin: 0;
            font-size: 0.9rem;
            color: #6c757d;
        }
        
        .puzzle-metadata span {
            font-weight: bold;
            color: #4CAF50;
        }

        .saved-games-sidebar {
            margin-top: 20px;
            background-color: #f8f9fa;
            padding: 10px;
            border-radius: 4px;
        }
        
        .saved-games-sidebar h3 {
            margin-top: 0;
            margin-bottom: 10px;
        }
        
        .saved-games-sidebar ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }
        
        .saved-games-sidebar li {
            padding: 8px;
            border-bottom: 1px solid #ddd;
        }
        
        .saved-games-sidebar li:last-child {
            border-bottom: none;
        }
    </style>
</head>
<body>
    <header>
        <h1>Crossword Puzzle</h1>
        <nav>
            <ul>
                <li><a href="/game/dashboard">Back to Dashboard</a></li>
                <li><a href="/auth/logout">Logout</a></li>
            </ul>
        </nav>
    </header>
    
    <main class="crossword-container">
        <div id="puzzle-info">
            <% if (typeof title !== 'undefined') { %>
                <h2><%= title %></h2>
            <% } else { %>
                <h2>Loading puzzle...</h2>
            <% } %>
            
            <% if (typeof description !== 'undefined') { %>
                <div class="puzzle-description"><%= description %></div>
            <% } else { %>
                <div class="puzzle-description"></div>
            <% } %>
            
            <% if (typeof puzzleId !== 'undefined') { %>
            <div class="puzzle-metadata">
                <p>Puzzle ID: <span id="current-puzzle-id"><%= puzzleId %></span></p>
                <% if (typeof level !== 'undefined') { %>
                <p>Difficulty: <span id="current-puzzle-level"><%= level %></span></p>
                <% } %>
            </div>
            <% } %>
        </div>
        
        <div id="crossword-grid" class="crossword-grid">
            <!-- Grid will be dynamically generated -->
        </div>
        
        <div class="clue-container">
            <div class="clue-list">
                <h3>Across</h3>
                <ul id="across-clues">
                    <!-- Across clues will be dynamically generated -->
                </ul>
            </div>
            
            <div class="clue-list">
                <h3>Down</h3>
                <ul id="down-clues">
                    <!-- Down clues will be dynamically generated -->
                </ul>
            </div>
        </div>
        
        <div id="message"></div>
        
        <div class="controls">
            <button id="check-button">Check Answers</button>
            <button id="save-button">Save Progress</button>
            <button id="hint-button">Get Hint</button>
            <button id="show-answers-button" class="show-answers-btn">Show Answers</button>
        </div>
        
        <div class="saved-games-sidebar">
            <h3>Your Saved Games</h3>
            <ul id="saved-games-sidebar-list">
                <li class="loading-saved-games">Loading...</li>
            </ul>
        </div>
    </main>
    
    <script>
        document.addEventListener('DOMContentLoaded', async () => {
            // Track puzzle start time
            const puzzleStartTime = new Date();
            // Track mistakes
            let puzzleMistakes = 0;
            // Get puzzle ID from URL
            const urlParams = new URLSearchParams(window.location.search);
            const puzzleId = urlParams.get('puzzleId');
            
            if (!puzzleId) {
                showMessage('No puzzle selected', 'error');
                return;
            }
            
            try {
                // Fetch puzzle data
                const response = await fetch(`/game/puzzles/details/${puzzleId}`);
                if (!response.ok) {
                    throw new Error('Failed to load puzzle');
                }
                
                const puzzleData = await response.json();
                const puzzle = JSON.parse(puzzleData.puzzleData);
                
                // Update puzzle info
                // Get title and description
                const title = puzzle.title ? puzzle.title : `${puzzleData.level.charAt(0).toUpperCase() + puzzleData.level.slice(1)} Puzzle`;
                const description = puzzle.description ? puzzle.description : '';
                
                // Update the display
                document.querySelector('#puzzle-info h2').textContent = title;
                document.querySelector('#puzzle-info .puzzle-description').textContent = description;
                
                // Generate grid
                generateGrid(puzzle.grid, puzzle.cellNumbers);
                
                // Generate clues
                generateClues(puzzle.clues);
                
                // Check for saved progress and load it
                await loadSavedProgress(puzzleId);
                
                // Load saved games sidebar
                await loadSavedGamesSidebar(puzzleId);
                
                // Add event listeners
                document.getElementById('check-button').addEventListener('click', () => checkAnswers(puzzle.grid));
                document.getElementById('save-button').addEventListener('click', () => {
                    saveProgress(puzzleId).catch(error => {
                        console.error('Error saving progress:', error);
                    });
                });
                document.getElementById('hint-button').addEventListener('click', () => getHint(puzzle.grid));
                document.getElementById('show-answers-button').addEventListener('click', () => showAnswers(puzzle.grid));
                
            } catch (error) {
                console.error('Error loading puzzle:', error);
                showMessage('Failed to load puzzle', 'error');
            }
        });
        
        function generateGrid(grid, cellNumbers) {
            const gridContainer = document.getElementById('crossword-grid');
            gridContainer.innerHTML = '';
            
            grid.forEach((cell, index) => {
                const cellElement = document.createElement('div');
                cellElement.classList.add('crossword-cell');
                
                if (cell === '#') {
                    cellElement.classList.add('blocked');
                } else {
                    const input = document.createElement('input');
                    input.type = 'text';
                    input.maxLength = 1;
                    input.dataset.index = index;
                    input.style.width = '80%';
                    input.style.height = '80%';
                    input.style.textAlign = 'center';
                    input.style.fontSize = '1.2rem';
                    input.style.border = 'none';
                    input.style.textTransform = 'uppercase';
                    cellElement.appendChild(input);
                    
                    // Add cell number if exists
                    if (cellNumbers[index]) {
                        const numberElement = document.createElement('span');
                        numberElement.classList.add('cell-number');
                        numberElement.textContent = cellNumbers[index];
                        cellElement.appendChild(numberElement);
                    }
                }
                
                gridContainer.appendChild(cellElement);
            });
        }
        
        function generateClues(clues) {
            const acrossContainer = document.getElementById('across-clues');
            const downContainer = document.getElementById('down-clues');
            
            acrossContainer.innerHTML = '';
            downContainer.innerHTML = '';
            
            clues.across.forEach(clue => {
                const clueElement = document.createElement('li');
                clueElement.textContent = `${clue.number}. ${clue.clue}`;
                acrossContainer.appendChild(clueElement);
            });
            
            clues.down.forEach(clue => {
                const clueElement = document.createElement('li');
                clueElement.textContent = `${clue.number}. ${clue.clue}`;
                downContainer.appendChild(clueElement);
            });
        }
        
        function checkAnswers(grid) {
            const inputs = document.querySelectorAll('.crossword-cell input');
            let correct = true;
            
            inputs.forEach(input => {
                const index = parseInt(input.dataset.index);
                const userAnswer = input.value.toUpperCase();
                const correctAnswer = grid[index].toUpperCase();
                
                if (userAnswer !== correctAnswer) {
                    correct = false;
                    input.style.color = 'red';
                } else {
                    input.style.color = 'green';
                }
            });
            
            if (correct) {
                showMessage('Congratulations! All answers are correct!', 'success');
            } else {
                showMessage('Some answers are incorrect. Try again!', 'error');
            }
        }
        
        function saveProgress(puzzleId) {
            const inputs = document.querySelectorAll('.crossword-cell input');
            const progress = {};
            
            inputs.forEach(input => {
                const index = input.dataset.index;
                progress[index] = input.value.toUpperCase();
            });
            
            // Add timestamp for when the game was saved
            progress.lastPlayed = new Date().toISOString();
            
            // Return a promise for the save operation
            return new Promise((resolve, reject) => {
                // Save progress to the server
                fetch('/game/save', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        puzzleId,
                        progress: progress // Send progress as is, not stringified
                    })
                })
                .then(response => {
                    if (response.ok) {
                        showMessage('Progress saved successfully!', 'success');
                        resolve(true);
                    } else {
                        showMessage('Failed to save progress', 'error');
                        reject(new Error('Failed to save progress'));
                    }
                })
                .catch(error => {
                    console.error('Error saving progress:', error);
                    showMessage('Failed to save progress', 'error');
                    reject(error);
                });
            });
        }
        
        function getHint(grid) {
            const inputs = document.querySelectorAll('.crossword-cell input');
            const emptyInputs = Array.from(inputs).filter(input => !input.value);
            
            if (emptyInputs.length === 0) {
                showMessage('No empty cells to provide hints for', 'error');
                return;
            }
            
            // Choose a random empty cell for a hint
            const randomInput = emptyInputs[Math.floor(Math.random() * emptyInputs.length)];
            const index = parseInt(randomInput.dataset.index);
            
            // Fill with the correct answer
            randomInput.value = grid[index];
            randomInput.style.color = 'blue';
            
            showMessage('Hint provided!', 'success');
        }
        
        function showMessage(message, type) {
            const messageElement = document.getElementById('message');
            messageElement.textContent = message;
            messageElement.className = type;
            messageElement.style.display = 'block';                setTimeout(() => {
                messageElement.style.display = 'none';
            }, 5000);
        }
        
        async function loadSavedProgress(puzzleId) {
            try {
                // Get the current user ID from meta tag or session
                const userId = document.querySelector('meta[name="user-id"]')?.content;
                if (!userId) {
                    console.log('No user ID found, cannot load saved progress');
                    return;
                }
                
                // Fetch the user's progress
                const response = await fetch(`/game/progress/${userId}`);
                if (!response.ok) {
                    throw new Error(`Failed to fetch saved progress: ${response.status}`);
                }
                
                const data = await response.json();
                const progress = data.progress || {};
                
                // Check if the user has saved progress for this puzzle
                if (!progress[puzzleId]) {
                    console.log('No saved progress found for this puzzle');
                    return;
                }
                
                // Parse the saved progress if it's a string
                const savedProgress = typeof progress[puzzleId] === 'string' 
                    ? JSON.parse(progress[puzzleId]) 
                    : progress[puzzleId];
                
                // Make sure savedProgress is valid data
                if (!savedProgress || typeof savedProgress !== 'object') {
                    console.error('Invalid progress data for puzzle', puzzleId);
                    return;
                }
                
                // Apply the saved progress to the grid
                const inputs = document.querySelectorAll('.crossword-cell input');
                inputs.forEach(input => {
                    const index = input.dataset.index;
                    if (savedProgress[index] && savedProgress[index] !== '') {
                        input.value = savedProgress[index];
                    }
                });
                
                showMessage('Saved progress loaded!', 'success');
            } catch (error) {
                console.error('Error loading saved progress:', error);
                showMessage('Failed to load saved progress', 'error');
            }
        }
        
        async function loadSavedGamesSidebar(currentPuzzleId) {
            try {
                // Get the current user ID
                const userId = document.querySelector('meta[name="user-id"]')?.content;
                if (!userId) {
                    console.log('No user ID found, cannot load saved games sidebar');
                    return;
                }
                
                // Get the saved games list container
                const savedGamesList = document.getElementById('saved-games-sidebar-list');
                
                // Fetch user's progress data
                const response = await fetch(`/game/progress/${userId}`);
                if (!response.ok) {
                    throw new Error(`Failed to fetch saved games: ${response.status}`);
                }
                
                const data = await response.json();
                const progress = data.progress || {};
                
                // Clear the list
                savedGamesList.innerHTML = '';
                
                if (Object.keys(progress).length === 0) {
                    savedGamesList.innerHTML = '<li class="no-saved-games">No saved games found</li>';
                    return;
                }
                
                // Sort puzzle IDs by last played date (most recent first)
                const sortedPuzzleIds = Object.keys(progress).sort((a, b) => {
                    const progressA = JSON.parse(progress[a]);
                    const progressB = JSON.parse(progress[b]);
                    const timeA = progressA.lastPlayed ? new Date(progressA.lastPlayed).getTime() : 0;
                    const timeB = progressB.lastPlayed ? new Date(progressB.lastPlayed).getTime() : 0;
                    return timeB - timeA;
                });
                
                // Add each saved game to the sidebar (limited to 5 most recent)
                const recentPuzzles = sortedPuzzleIds.slice(0, 5);
                
                for (const puzzleId of recentPuzzles) {
                    try {
                        // Skip the current puzzle
                        if (puzzleId === currentPuzzleId) continue;
                        
                        const puzzleResponse = await fetch(`/game/puzzles/details/${puzzleId}`);
                        if (!puzzleResponse.ok) continue;
                        
                        const puzzle = await puzzleResponse.json();
                        const savedProgress = typeof progress[puzzleId] === 'string'
                            ? JSON.parse(progress[puzzleId])
                            : progress[puzzleId];
                        
                        // Calculate completion percentage
                        const puzzleData = JSON.parse(puzzle.puzzleData);
                        const totalCells = Object.keys(puzzleData.grid).filter(idx => puzzleData.grid[idx] !== '#').length;
                        const filledCells = Object.keys(savedProgress).filter(idx => 
                            idx !== 'lastPlayed' && savedProgress[idx] !== '').length;
                        const completionPercentage = Math.round((filledCells / totalCells) * 100);
                        
                        // Get the puzzle title if available
                        const title = puzzleData.title ? puzzleData.title : `Puzzle #${puzzle.id}`;
                        
                        // Create the list item for the saved game
                        const savedGameItem = document.createElement('li');
                        savedGameItem.className = 'saved-game-sidebar-item';
                        savedGameItem.innerHTML = `
                            <div class="saved-game-sidebar-info">
                                <h4>${title}</h4>
                                <p>${puzzle.level} - ${completionPercentage}% complete</p>
                            </div>
                            <button class="load-saved-game-sidebar-btn" data-puzzle-id="${puzzle.id}">
                                Switch
                            </button>
                        `;
                        
                        // Add event listener to the button
                        const loadButton = savedGameItem.querySelector('.load-saved-game-sidebar-btn');
                        loadButton.addEventListener('click', function() {
                            // Save current progress before switching
                            saveProgress(currentPuzzleId).then(() => {
                                window.location.href = `/game?puzzleId=${puzzleId}`;
                            });
                        });
                        
                        savedGamesList.appendChild(savedGameItem);
                    } catch (error) {
                        console.error(`Error loading saved game for puzzle ${puzzleId}:`, error);
                    }
                }
                
                // Add a link to view all saved games
                const viewAllItem = document.createElement('li');
                viewAllItem.className = 'view-all-saved-games';
                viewAllItem.innerHTML = `
                    <a href="/game/dashboard" class="view-all-link">View all saved games</a>
                `;
                savedGamesList.appendChild(viewAllItem);
                
            } catch (error) {
                console.error('Error loading saved games sidebar:', error);
                document.getElementById('saved-games-sidebar-list').innerHTML = 
                    '<li class="error-message">Error loading saved games</li>';
            }
        }
        
        function loadSavedGame(puzzleId) {
            // Redirect to the same puzzle with the saved progress
            window.location.href = `/game?puzzleId=${puzzleId}`;
        }
        
        function showAnswers(grid) {
            // Confirm with the user before showing all answers
            if (!confirm('Are you sure you want to see all answers? This will reveal the entire puzzle.')) {
                return;
            }
            
            const inputs = document.querySelectorAll('.crossword-cell input');
            
            inputs.forEach(input => {
                const index = parseInt(input.dataset.index);
                const correctAnswer = grid[index].toUpperCase();
                input.value = correctAnswer;
                input.style.color = '#8e44ad'; // Purple color to indicate revealed answers
                input.readOnly = true; // Make the inputs read-only after revealing answers
            });
            
            // Disable the check answers button since answers are already shown
            document.getElementById('check-button').disabled = true;
            document.getElementById('hint-button').disabled = true;
            document.getElementById('show-answers-button').disabled = true;
            
            showMessage('All answers have been revealed', 'info');
        }
        // Check for achievements when a puzzle is completed
        async function checkAchievements(puzzleId, completionTime, mistakesMade) {
            try {
                const response = await fetch('/achievements/check', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        puzzleId,
                        completionTime,
                        mistakesMade
                    })
                });
                
                if (!response.ok) {
                    throw new Error('Failed to check achievements');
                }
                
                const data = await response.json();
                
                if (data.newAchievements && data.newAchievements.length > 0) {
                    // Show achievement notification
                    const achievementNames = data.newAchievements.map(a => a.name).join(', ');
                    showMessage('🏆 New achievement(s) unlocked: ' + achievementNames, 'success');
                    
                    // Create modal to display achievements more prominently
                    const modal = document.createElement('div');
                    modal.style.position = 'fixed';
                    modal.style.top = '0';
                    modal.style.left = '0';
                    modal.style.width = '100%';
                    modal.style.height = '100%';
                    modal.style.backgroundColor = 'rgba(0,0,0,0.7)';
                    modal.style.display = 'flex';
                    modal.style.justifyContent = 'center';
                    modal.style.alignItems = 'center';
                    modal.style.zIndex = '1000';
                    
                    const modalContent = document.createElement('div');
                    modalContent.style.backgroundColor = '#fff';
                    modalContent.style.padding = '20px';
                    modalContent.style.borderRadius = '10px';
                    modalContent.style.maxWidth = '500px';
                    modalContent.style.textAlign = 'center';
                    
                    let achievementsHtml = '<h2>🏆 Achievement Unlocked!</h2>';
                    
                    data.newAchievements.forEach(achievement => {
                        achievementsHtml += `
                            <div style="margin: 15px 0; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
                                <h3 style="color: #ffa500;">${achievement.name}</h3>
                                <p>${achievement.description}</p>
                            </div>
                        `;
                    });
                    
                    achievementsHtml += '<p>Check your achievements page to see all your badges!</p>';
                    achievementsHtml += '<button id="close-achievement-modal" style="padding: 8px 16px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer; margin-top: 15px;">Continue</button>';
                    
                    modalContent.innerHTML = achievementsHtml;
                    modal.appendChild(modalContent);
                    
                    document.body.appendChild(modal);
                    
                    document.getElementById('close-achievement-modal').addEventListener('click', () => {
                        document.body.removeChild(modal);
                    });
                    
                    // Add link to achievements page
                    const viewAchievementsLink = document.createElement('p');
                    viewAchievementsLink.innerHTML = '<a href="/achievements" style="display: block; margin-top: 20px; text-align: center;">View All Achievements</a>';
                    document.querySelector('.controls').appendChild(viewAchievementsLink);
                }
            } catch (error) {
                console.error('Error checking achievements:', error);
            }
        }
    </script>
</body>
</html>
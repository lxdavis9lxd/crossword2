<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crossword Puzzle</title>
    <link rel="stylesheet" href="/styles.css">
    <style>
        .crossword-container {
            margin: 20px auto;
            max-width: 600px;
        }
        
        .crossword-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 1px;
            width: 100%;
            max-width: 400px;
            margin: 0 auto;
        }
        
        .crossword-cell {
            position: relative;
            border: 1px solid #333;
            aspect-ratio: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1.5rem;
            text-transform: uppercase;
            background-color: white;
        }
        
        .crossword-cell.blocked {
            background-color: #333;
        }
        
        .cell-number {
            position: absolute;
            top: 2px;
            left: 2px;
            font-size: 0.6rem;
        }
        
        .clue-container {
            margin-top: 20px;
        }
        
        .clue-list {
            margin-bottom: 20px;
        }
        
        .clue-list h3 {
            margin-bottom: 10px;
        }
        
        #message {
            margin-top: 20px;
            padding: 10px;
            display: none;
        }
        
        #message.success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        #message.error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .controls {
            margin-top: 20px;
            display: flex;
            justify-content: center;
            gap: 10px;
        }
    </style>
</head>
<body>
    <header>
        <h1>Crossword Puzzle</h1>
        <nav>
            <ul>
                <li><a href="/game/dashboard">Back to Dashboard</a></li>
                <li><a href="/auth/logout">Logout</a></li>
            </ul>
        </nav>
    </header>
    
    <main class="crossword-container">
        <div id="puzzle-info">
            <h2>Loading puzzle...</h2>
        </div>
        
        <div id="crossword-grid" class="crossword-grid">
            <!-- Grid will be dynamically generated -->
        </div>
        
        <div class="clue-container">
            <div class="clue-list">
                <h3>Across</h3>
                <ul id="across-clues">
                    <!-- Across clues will be dynamically generated -->
                </ul>
            </div>
            
            <div class="clue-list">
                <h3>Down</h3>
                <ul id="down-clues">
                    <!-- Down clues will be dynamically generated -->
                </ul>
            </div>
        </div>
        
        <div id="message"></div>
        
        <div class="controls">
            <button id="check-button">Check Answers</button>
            <button id="save-button">Save Progress</button>
            <button id="hint-button">Get Hint</button>
        </div>
    </main>
    
    <script>
        document.addEventListener('DOMContentLoaded', async () => {
            // Get puzzle ID from URL
            const urlParams = new URLSearchParams(window.location.search);
            const puzzleId = urlParams.get('puzzleId');
            
            if (!puzzleId) {
                showMessage('No puzzle selected', 'error');
                return;
            }
            
            try {
                // Fetch puzzle data
                const response = await fetch(`/game/puzzles/details/${puzzleId}`);
                if (!response.ok) {
                    throw new Error('Failed to load puzzle');
                }
                
                const puzzleData = await response.json();
                const puzzle = JSON.parse(puzzleData.puzzleData);
                
                // Update puzzle info
                document.querySelector('#puzzle-info h2').textContent = `${puzzleData.level.charAt(0).toUpperCase() + puzzleData.level.slice(1)} Puzzle`;
                
                // Generate grid
                generateGrid(puzzle.grid, puzzle.cellNumbers);
                
                // Generate clues
                generateClues(puzzle.clues);
                
                // Add event listeners
                document.getElementById('check-button').addEventListener('click', () => checkAnswers(puzzle.grid));
                document.getElementById('save-button').addEventListener('click', () => saveProgress(puzzleId));
                document.getElementById('hint-button').addEventListener('click', () => getHint(puzzle.grid));
                
            } catch (error) {
                console.error('Error loading puzzle:', error);
                showMessage('Failed to load puzzle', 'error');
            }
        });
        
        function generateGrid(grid, cellNumbers) {
            const gridContainer = document.getElementById('crossword-grid');
            gridContainer.innerHTML = '';
            
            grid.forEach((cell, index) => {
                const cellElement = document.createElement('div');
                cellElement.classList.add('crossword-cell');
                
                if (cell === '#') {
                    cellElement.classList.add('blocked');
                } else {
                    const input = document.createElement('input');
                    input.type = 'text';
                    input.maxLength = 1;
                    input.dataset.index = index;
                    input.style.width = '80%';
                    input.style.height = '80%';
                    input.style.textAlign = 'center';
                    input.style.fontSize = '1.2rem';
                    input.style.border = 'none';
                    input.style.textTransform = 'uppercase';
                    cellElement.appendChild(input);
                    
                    // Add cell number if exists
                    if (cellNumbers[index]) {
                        const numberElement = document.createElement('span');
                        numberElement.classList.add('cell-number');
                        numberElement.textContent = cellNumbers[index];
                        cellElement.appendChild(numberElement);
                    }
                }
                
                gridContainer.appendChild(cellElement);
            });
        }
        
        function generateClues(clues) {
            const acrossContainer = document.getElementById('across-clues');
            const downContainer = document.getElementById('down-clues');
            
            acrossContainer.innerHTML = '';
            downContainer.innerHTML = '';
            
            clues.across.forEach(clue => {
                const clueElement = document.createElement('li');
                clueElement.textContent = `${clue.number}. ${clue.clue}`;
                acrossContainer.appendChild(clueElement);
            });
            
            clues.down.forEach(clue => {
                const clueElement = document.createElement('li');
                clueElement.textContent = `${clue.number}. ${clue.clue}`;
                downContainer.appendChild(clueElement);
            });
        }
        
        function checkAnswers(grid) {
            const inputs = document.querySelectorAll('.crossword-cell input');
            let correct = true;
            
            inputs.forEach(input => {
                const index = parseInt(input.dataset.index);
                const userAnswer = input.value.toUpperCase();
                const correctAnswer = grid[index].toUpperCase();
                
                if (userAnswer !== correctAnswer) {
                    correct = false;
                    input.style.color = 'red';
                } else {
                    input.style.color = 'green';
                }
            });
            
            if (correct) {
                showMessage('Congratulations! All answers are correct!', 'success');
            } else {
                showMessage('Some answers are incorrect. Try again!', 'error');
            }
        }
        
        function saveProgress(puzzleId) {
            const inputs = document.querySelectorAll('.crossword-cell input');
            const progress = {};
            
            inputs.forEach(input => {
                const index = input.dataset.index;
                progress[index] = input.value.toUpperCase();
            });
            
            // Save progress to the server
            fetch('/game/save', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    puzzleId,
                    progress: JSON.stringify(progress)
                })
            })
            .then(response => {
                if (response.ok) {
                    showMessage('Progress saved successfully!', 'success');
                } else {
                    showMessage('Failed to save progress', 'error');
                }
            })
            .catch(error => {
                console.error('Error saving progress:', error);
                showMessage('Failed to save progress', 'error');
            });
        }
        
        function getHint(grid) {
            const inputs = document.querySelectorAll('.crossword-cell input');
            const emptyInputs = Array.from(inputs).filter(input => !input.value);
            
            if (emptyInputs.length === 0) {
                showMessage('No empty cells to provide hints for', 'error');
                return;
            }
            
            // Choose a random empty cell for a hint
            const randomInput = emptyInputs[Math.floor(Math.random() * emptyInputs.length)];
            const index = parseInt(randomInput.dataset.index);
            
            // Fill with the correct answer
            randomInput.value = grid[index];
            randomInput.style.color = 'blue';
            
            showMessage('Hint provided!', 'success');
        }
        
        function showMessage(message, type) {
            const messageElement = document.getElementById('message');
            messageElement.textContent = message;
            messageElement.className = type;
            messageElement.style.display = 'block';
            
            setTimeout(() => {
                messageElement.style.display = 'none';
            }, 5000);
        }
    </script>
</body>
</html>